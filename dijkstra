def dijkstra(graf, awal, akhir):
    # Inisialisasi jarak ke semua node dengan infinity, kecuali node awal
    jarak = {node: float('infinity') for node in graf}
    jarak[awal] = 0
    # Inisialisasi rute untuk menyimpan jalur terpendek ke setiap node
    rute = {node: [] for node in graf}
    rute[awal] = [awal]
    # Set untuk menyimpan node yang sudah dikunjungi
    visited = set()

    while True:
        # Mencari node dengan jarak terpendek yang belum dikunjungi
        min_jarak = float('infinity')
        min_node = None
        for node in jarak:
            if node not in visited and jarak[node] < min_jarak:
                min_jarak = jarak[node]
                min_node = node
        
        # Jika tidak ada node yang dapat diakses atau semua node sudah dikunjungi
        if min_node is None:
            break

        # Menandai node tersebut sebagai sudah dikunjungi
        visited.add(min_node)
        
        # Memperbarui jarak untuk tetangga-tetangga dari node yang baru dikunjungi
        for next_node, distance in graf[min_node]:
            new_dist = jarak[min_node] + distance
            if new_dist < jarak[next_node]:
                jarak[next_node] = new_dist
                rute[next_node] = rute[min_node] + [next_node]

    # Mengembalikan hasil
    if jarak[akhir] == float('infinity'):
        return None  # Jika tidak ada rute yang ditemukan
    else:
        return (rute[akhir], jarak[akhir])

def print_rute(path, dist):
    print(f'Rute: {" -> ".join(path)}, Jarak: {dist} km')

graf_kota_china = {
    'Beijing': [('Tianjin', 120), ('Shijiazhuang', 283), ('Jinan', 405)],
    'Tianjin': [('Beijing', 120), ('Shijiazhuang', 247)],
    'Shijiazhuang': [('Beijing', 283), ('Tianjin', 247), ('Zhengzhou', 511), ('Xingtai', 109)],
'Jinan': [('Beijing', 405), ('Shijiazhuang', 325), ('Zhengzhou', 482), ('Qingdao', 393)],
    'Zhengzhou': [('Shijiazhuang', 511), ('Jinan', 482), ('Wuhan', 481)],
    'Nanjing': [('Jinan', 551), ('Hefei', 164), ('Shanghai', 301)],
    'Qingdao': [('Jinan', 393), ('Taian', 135)],
    'Wuhan': [('Zhengzhou', 481), ('Changsha', 350), ('Nanchang', 328)],
    'Hefei': [('Nanjing', 164), ('Wuhan', 351)],
    'Shanghai': [('Nanjing', 301), ('Hangzhou', 180)],
    'Xingtai': [('Shijiazhuang', 109)],  # Tambahkan node 'Xingtai'
    'Changsha': [('Wuhan', 350)],  # Tambahkan node 'Changsha'
    'Nanchang': [('Wuhan', 328)],  # Tambahkan node 'Nanchang'
    'Taian': [('Qingdao', 135)],  # Tambahkan node 'Taian'
    'Hangzhou': [('Shanghai', 180)]  # Tambahkan node 'Hangzhou'
}

tempat_awal = input('Masukkan Kota Asal: ')
tempat_akhir = input('Masukkan Kota Tujuan: ')

result = dijkstra(graf_kota_china, tempat_awal, tempat_akhir)
if result:
    path, dist = result
    print('Rute Tercepat:', ' -> '.join(path), f', Jarak: {dist} km')
else:
    print('Tidak ditemukan rute dari', tempat_awal, 'ke', tempat_akhir)
